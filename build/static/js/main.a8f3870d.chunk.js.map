{"version":3,"sources":["components/Nav.js","utils/API.js","components/Data.js","components/Header.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Nav","handleSearchChange","className","type","placeholder","aria-label","onChange","e","axios","get","DataBody","users","undefined","name","map","gender","dob","email","phone","picture","login","key","salt","data-th","src","medium","alt","first","last","join","href","target","date","dateArray","split","year","trueMonth","day","ending","charAt","pop","getDate","age","DataTable","headings","handleSort","id","width","style","onClick","toLowerCase","color","icon","faSort","DataArea","useState","order","filteredUsers","user","setUser","API","then","results","data","event","preventDefault","stopPropagation","nativeEvent","stopImmediatePropagation","console","log","value","filter","filteredList","item","Object","values","indexOf","heading","sort","a","b","localeCompare","Header","Wrapper","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8f3870d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Nav({ handleSearchChange }) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand navbar-dark\">\r\n      <div className=\"navbar-collapse row\">\r\n      <div className=\"searchbox\">\r\n      <form className=\"form-inline\">\r\n        <input\r\n          className=\"form-control center\"\r\n          type=\"search\"\r\n          placeholder=\"Search\"\r\n          aria-label=\"Search\"\r\n          onChange={e => handleSearchChange(e)}\r\n        />\r\n      </form>\r\n    </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};\r\n","import React, {useState} from \"react\";\r\nimport Nav from \"./Nav\";\r\nimport API from \"../utils/API\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSort } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction DataBody({ users }) {\r\n    function getDate(date) {\r\n        const monthArray = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n        const dateArray = date.split(\"-\");\r\n        const year = dateArray[0];\r\n        const month = dateArray[1];\r\n        const trueMonth = month - 1\r\n        const dayArray = dateArray[2].split(\"T\");\r\n        let day = dayArray[0];\r\n        let ending = \"th\"\r\n        if (day.charAt(0) === \"0\"){\r\n            day = (day.split(\"\").pop())\r\n        }\r\n        if (day === \"1\") {\r\n            ending = \"st\"\r\n        }\r\n        else if (day === \"2\") {\r\n            ending = \"nd\"\r\n        }\r\n        else if (day === \"3\") {\r\n            ending = \"rd\"\r\n        }\r\n        const formattedDate = (monthArray[trueMonth]+\" \"+day+ending+\" \"+year);\r\n        return formattedDate;\r\n    }\r\n  \r\n    return (\r\n      <tbody>\r\n        {users[0] !== undefined && users[0].name !== undefined ? (\r\n          users.map(({ gender, name, dob, email, phone, picture, login }) => {\r\n            return (\r\n              <tr key={login.salt}>\r\n                <td data-th=\"Image\" className=\"center\">\r\n                  <img\r\n                    src={picture.medium}\r\n                    alt={\"profile image for \" + [name.first,name.last].join(\" \")}\r\n                    className=\"img-responsive\"\r\n                  />\r\n                </td>\r\n                <td data-th=\"Name\" className=\" cap center\">\r\n                  {[name.first,name.last].join(\" \")}\r\n                </td>\r\n                <td data-th=\"Gender\" className=\"cap center\">\r\n                  {gender}\r\n                </td>\r\n                <td data-th=\"Phone\" className=\"center\">\r\n                  {phone}\r\n                </td>\r\n                <td data-th=\"Email\" className=\"center\">\r\n                  <a href={\"mailto:\" + email} target=\"__blank\">\r\n                    {email}\r\n                  </a>\r\n                </td>\r\n                <td data-th=\"DOB\" className=\"center\">\r\n                  {getDate(dob.date)+\" (\"+dob.age+\")\"} \r\n                </td>\r\n              </tr>\r\n            );\r\n          })\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </tbody>\r\n    );\r\n}\r\n\r\nfunction DataTable({ headings, users, handleSort }) {\r\n  return (\r\n    <div className=\"datatable mt-5\">\r\n      <table\r\n        id=\"table\"\r\n        className=\"table table-striped table-hover table-bordered\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            {headings.map(({ name, width }) => {\r\n              if (name === \"Name\") {\r\n                return (\r\n                <th\r\n                  className=\"col\"\r\n                  key={name}\r\n                  style={{ width }}\r\n                  onClick={() => {\r\n                    handleSort(name.toLowerCase());\r\n                  }}\r\n                >\r\n                  {name}\r\n                  <span style={{color: \"#ffb598\"}}><FontAwesomeIcon icon={faSort}/></span>\r\n                </th>\r\n              )}\r\n              else {\r\n                return (\r\n                  <th\r\n                    className=\"col\"\r\n                    key={name}\r\n                    style={{ width }}\r\n                    onClick={() => {\r\n                      handleSort(name.toLowerCase());\r\n                    }}\r\n                  >\r\n                    {name}\r\n                  </th>\r\n                )\r\n              }\r\n            })}\r\n          </tr>\r\n        </thead>\r\n\r\n        <DataBody users={users} />\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function DataArea (){\r\n  const [user,setUser] = useState({\r\n    users: undefined,\r\n    order: \"descend\",\r\n    filteredUsers: [{}]\r\n  })\r\n\r\n  if (user.users === undefined) {\r\n    getUsers()\r\n  }\r\n\r\n  const headings = [\r\n    { name: \"Image\", width: \"10%\" },\r\n    { name: \"Name\", width: \"10%\" },\r\n    { name: \"Gender\", width: \"10%\" },\r\n    { name: \"Phone\", width: \"20%\" },\r\n    { name: \"Email\", width: \"20%\" },\r\n    { name: \"DOB\", width: \"10%\" }\r\n  ]\r\n\r\n  const handleSort = heading => {\r\n    if (user.order === \"descend\") {\r\n      setUser({\r\n        order: \"ascend\"\r\n      })\r\n    } else {\r\n      setUser({\r\n        order: \"descend\"\r\n      })\r\n    }\r\n    const sorting = (a, b) => {\r\n      if (user.order === \"ascend\") {\r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        } else if (heading === \"name\") {\r\n          return a[heading].first.localeCompare(b[heading].first);\r\n        } else {\r\n          return a[heading] - b[heading];\r\n        }\r\n      } else {\r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        } else if (heading === \"name\") {\r\n          return b[heading].first.localeCompare(a[heading].first);\r\n        } else {\r\n          return b[heading] - a[heading];\r\n        }\r\n      }\r\n\r\n    }\r\n    setUser({ filteredUsers: user.filteredUsers.sort(sorting) });\r\n  }\r\n\r\n  const handleSearchChange = event => {\r\n    event.preventDefault()\r\n    event.stopPropagation();\r\n    event.nativeEvent.stopImmediatePropagation();\r\n    console.log(event.target.value,user.users)\r\n    const filter = event.target.value;\r\n    const filteredList = user.users.filter(item => {\r\n      let values = Object.values(item)\r\n        .join(\"\")\r\n        .toLowerCase();\r\n      return values.indexOf(filter.toLowerCase()) !== -1;\r\n    });\r\n    setUser({ filteredUsers: filteredList });\r\n  }\r\n\r\n  function getUsers() {\r\n    API.getUsers().then(results => {\r\n      setUser({\r\n        users: results.data.results,\r\n        filteredUsers: results.data.results\r\n      });\r\n    });\r\n  }\r\n\r\n    return (\r\n      <>\r\n        <Nav handleSearchChange={handleSearchChange} />\r\n        <div className=\"data-area\">\r\n          <DataTable\r\n            headings={headings}\r\n            users={user.filteredUsers}\r\n            handleSort={handleSort}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n\r\n}","import React from 'react';\r\n\r\nexport default function Header (){\r\n    return (\r\n      <div className=\"header\">\r\n        <h1>Employee Directory</h1>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nfunction Wrapper({ children }) {\r\n  return (\r\n      <div className=\"wrapper\">\r\n        { children }\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\n// import logo from './logo.svg';\nimport './utils/css/App.css';\nimport Main from \"./components/Data\";\nimport Header from \"./components/Header\";\nimport Wrapper from './components/Wrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Header />\n        <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './utils/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}